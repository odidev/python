name: Python Package

on: [push]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        os: ['ubuntu-latest', 'macos-latest']
        experimental: [false]
        include:
        - os: 'macos-11'
          experimental: true
          python-version: 3.9
#        - python-version: '3.10'
#          os: 'ubuntu-latest'
#          experimental: true
#        - python-version: '3.10'
#          os: 'macos-latest'
#          experimental: true

    steps:
    - uses: actions/checkout@v2
    - name: Customize git
      run: |
        git submodule update --init --recursive
        git fetch --prune --unshallow
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install compilation dependencies [Ubuntu/C++]
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt install libeigen3-dev
    - name: Install compilation dependencies [MacOS/C++]
      if: matrix.os == 'macos-latest' || matrix.os == 'macos-11'
      run: |
        brew install eigen
    - name: Install compilation dependencies [Python]
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel setuptools-git
    - name: Compile
      run: |
        python setup.py bdist_wheel
        rm -rf build
    - name: Install & Test 
      run: |
        python tests/print_platform_info.py
        python -m pip install dist/*.whl
        cd tests
        python -m pip install scipy quadprog
        python DQ_test.py
        python DQ_Kinematics_test.py
        python cpp_issues.py
        python python_issues.py
        cd ..
    - name: Rename wheel (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt install rename
        cd dist
        rename 's/linux/manylinux1/' *
        cd ..
    - name: Publish to PyPi
      env:
        TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      if: github.ref == 'refs/heads/master'
      run: |
        python -m pip install twine
        twine upload dist/*

  Build-aarch64:
    name: "Build and test ${{ matrix.pyver }} aarch64 wheel"
    strategy:
      matrix:
        pyver: [cp36-cp36m, cp37-cp37m, cp38-cp38, cp39-cp39]
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      py: /opt/python/${{ matrix.pyver }}/bin/python
      img: quay.io/pypa/manylinux2014_aarch64
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Customize git
      run: |
        git submodule update --init --recursive
        git fetch --prune --unshallow      
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
    - name: Build Wheel
      run: |
            docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
            ${{ env.img }} \
            bash -exc '${{ env.py }} -m venv .env && \
            source .env/bin/activate && \
            yum install -y epel-release && \
            yum-config-manager --enable epel && \
            yum install -y eigen3-devel && \
            python -m pip install --upgrade pip && \
            pip install setuptools wheel setuptools-git && \
            python setup.py bdist_wheel && \
            rm -rf build && \
            python tests/print_platform_info.py && \
            python -m pip install dist/*.whl && \
            cd tests && \
            python -m pip install scipy quadprog && \
            python DQ_test.py && \
            python DQ_Kinematics_test.py && \
            python cpp_issues.py && \
            python python_issues.py && \
            cd .. && \
            auditwheel repair ./dist/* -w ./dist && \
            deactivate'
    - name: Publish to PyPi
      env:
        TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      if: github.ref == 'refs/heads/master'
      run: |
        python -m pip install twine
        twine upload dist/*
